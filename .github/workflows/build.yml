name: Azure Training CI/CD Pipeline
on:
  #Manually trigger workflow runs
  workflow_dispatch:
  #Trigger the workflow on push from the main branch
  push:
    tags:
      - 'v*'
jobs:
  #Test's job
  tests:
    name: Unit tests
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    #Job's steps
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v1
      #Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'
          distribution: adopt
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Run Tests
      - name: Run Tests
        run: mvn -B test
  #Build's job
  build:
    #Depends on sonar's job
    needs: tests
    name: Build and Deploy
    #Run on Ubuntu using the latest version
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      #Check-out your repository under $GITHUB_WORKSPACE, so your workflow can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # get all tags, needed to get git log
          ref: main
      #Set up JDK 17
      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'
          distribution: adopt
      #Set up Maven cache
      - name: Cache Maven packages
        #This action allows caching dependencies and build outputs to improve workflow execution time.
        uses: actions/cache@v1
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      #Build the application using Maven
      - name: Build and Push Image with Maven
        run: mvn -B package jib:build -Djib.to.image=handson12345.azurecr.io/exist-web:${{ github.sha }} -Djib.to.auth.username=${{ secrets.service_principal }} -Djib.to.auth.password=${{ secrets.service_principal_password }} -DskipTests --file pom.xml
      - name: get semantic tag version and release notes from commit message
        id: tag
        run: |
          curtag=${GITHUB_REF_NAME}
          major_minor=$(echo "$curtag" | cut -d'.' -f1-2)
          patch=$(echo "$curtag" | cut -d'.' -f3)
          # avoid empty patch number
          [ -n "$patch" ] && ((patch--)) || patch=".x"
          prevtag="${major_minor}.${patch}"
          
          echo "" > body.log
          if git tag | grep $prevtag ; then
            git log -q ${curtag}...${prevtag} --pretty="- %s" -q --no-color >> body.log
          else
            git log --pretty="- %s" -q --no-color >> body.log
          fi
          line_count=$(cat body.log | wc -l)
          
          echo "curtag=$curtag" >> $GITHUB_OUTPUT
          echo "prevtag=$prevtag" >> $GITHUB_OUTPUT
          echo "line_count=$line_count" >> $GITHUB_OUTPUT
      #Build the application using Maven
      #- uses: ncipollo/release-action@v1
      #  with:
      #    name: ${{ env.GITHUB_REF_NAME }}
      #    tag: ${{ env.GITHUB_REF_NAME }}
      #    artifacts: "target/exist-web.jar"
      #    bodyFile: "body.log"
      #    token: ${{ secrets.GITHUB_TOKEN }}
      - name: Azure login
        id: login
        uses: azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: 'handson'
          cluster-name: 'handson'
      - name: Setup kubectl
        id: install-kubectl
        uses: azure/setup-kubectl@v3
      - name: Deploy to AKS
        id: deploy-aks
        uses: Azure/k8s-deploy@v4
        with:
          namespace: '<changeme>'
          manifests: |
            handson-k8.yaml
          images: 'handson12345.azurecr.io/exist-web:${{ github.sha }}'
          pull-images: false
